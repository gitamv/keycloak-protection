=begin
#Keycloak Protection API

#UMA-compliant set of endpoints.

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'date'

module KeycloakProtection
  class Resource
    attr_accessor :name

    attr_accessor :_id

    attr_accessor :type

    attr_accessor :icon_uri

    attr_accessor :owner

    attr_accessor :owner_managed_access

    attr_accessor :resource_scopes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'_id' => :'_id',
        :'type' => :'type',
        :'icon_uri' => :'icon_uri',
        :'owner' => :'owner',
        :'owner_managed_access' => :'ownerManagedAccess',
        :'resource_scopes' => :'resource_scopes'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'_id' => :'String',
        :'type' => :'String',
        :'icon_uri' => :'String',
        :'owner' => :'String',
        :'owner_managed_access' => :'Boolean',
        :'resource_scopes' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KeycloakProtection::Resource` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KeycloakProtection::Resource`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = ''
      end

      if attributes.key?(:'_id')
        self._id = attributes[:'_id']
      else
        self._id = ''
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = ''
      end

      if attributes.key?(:'icon_uri')
        self.icon_uri = attributes[:'icon_uri']
      else
        self.icon_uri = ''
      end

      if attributes.key?(:'owner')
        self.owner = attributes[:'owner']
      else
        self.owner = ''
      end

      if attributes.key?(:'owner_managed_access')
        self.owner_managed_access = attributes[:'owner_managed_access']
      else
        self.owner_managed_access = true
      end

      if attributes.key?(:'resource_scopes')
        if (value = attributes[:'resource_scopes']).is_a?(Array)
          self.resource_scopes = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      pattern = Regexp.new(/^.*$/)
      if !@name.nil? && @name !~ pattern
        invalid_properties.push("invalid value for \"name\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^.*$/)
      if !@_id.nil? && @_id !~ pattern
        invalid_properties.push("invalid value for \"_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^.*$/)
      if !@type.nil? && @type !~ pattern
        invalid_properties.push("invalid value for \"type\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^.*$/)
      if !@icon_uri.nil? && @icon_uri !~ pattern
        invalid_properties.push("invalid value for \"icon_uri\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^.*$/)
      if !@owner.nil? && @owner !~ pattern
        invalid_properties.push("invalid value for \"owner\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@name.nil? && @name !~ Regexp.new(/^.*$/)
      return false if !@_id.nil? && @_id !~ Regexp.new(/^.*$/)
      return false if !@type.nil? && @type !~ Regexp.new(/^.*$/)
      return false if !@icon_uri.nil? && @icon_uri !~ Regexp.new(/^.*$/)
      return false if !@owner.nil? && @owner !~ Regexp.new(/^.*$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      pattern = Regexp.new(/^.*$/)
      if !name.nil? && name !~ pattern
        fail ArgumentError, "invalid value for \"name\", must conform to the pattern #{pattern}."
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] _id Value to be assigned
    def _id=(_id)
      pattern = Regexp.new(/^.*$/)
      if !_id.nil? && _id !~ pattern
        fail ArgumentError, "invalid value for \"_id\", must conform to the pattern #{pattern}."
      end

      @_id = _id
    end

    # Custom attribute writer method with validation
    # @param [Object] type Value to be assigned
    def type=(type)
      pattern = Regexp.new(/^.*$/)
      if !type.nil? && type !~ pattern
        fail ArgumentError, "invalid value for \"type\", must conform to the pattern #{pattern}."
      end

      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] icon_uri Value to be assigned
    def icon_uri=(icon_uri)
      pattern = Regexp.new(/^.*$/)
      if !icon_uri.nil? && icon_uri !~ pattern
        fail ArgumentError, "invalid value for \"icon_uri\", must conform to the pattern #{pattern}."
      end

      @icon_uri = icon_uri
    end

    # Custom attribute writer method with validation
    # @param [Object] owner Value to be assigned
    def owner=(owner)
      pattern = Regexp.new(/^.*$/)
      if !owner.nil? && owner !~ pattern
        fail ArgumentError, "invalid value for \"owner\", must conform to the pattern #{pattern}."
      end

      @owner = owner
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          _id == o._id &&
          type == o.type &&
          icon_uri == o.icon_uri &&
          owner == o.owner &&
          owner_managed_access == o.owner_managed_access &&
          resource_scopes == o.resource_scopes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, _id, type, icon_uri, owner, owner_managed_access, resource_scopes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        KeycloakProtection.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
